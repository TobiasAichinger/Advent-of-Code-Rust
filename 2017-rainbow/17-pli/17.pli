/*********************************************************************/
/* Advent of Code 2017 - Day 17: Solve Spinlock                      */
/*                       This program shows an implementation of the */
/*                       problem provided by the Advent of Code team */
/*                       for the day 17 of the year 2017             */
/*                                                                   */
/* It does not require any parameters                                */
/*********************************************************************/
day17: proc options(main);
    dcl SYSPRINT    print;

    call partone(3, 2017);
    call parttwo(3, 50000000);

    /*****************************************************************/
    /* I am using a little hack here so I do not have to implement a */
    /* list in pl/1 where I am just using an array instead of a list */
    /* and shift every element to the right                          */
    /*****************************************************************/
    partone: proc(step, times);
        dcl (step, times, i, j, cal, loc, sp(2018))   fixed bin(24);

        do i = 1 to times;
            loc = mod( (loc + step + 1), i );

            do j = loc + 1 to i;
                cal = j - (loc + 1);
                sp(i - cal) = sp(i - cal - 1);
            end;
            
            sp(loc + 1) = i;
        end;

        put list ( 'Part one:' || sp(mod( (loc + 2), 2018 )) );

    end partone;

    parttwo: proc(step, times);
        dcl (step, times, i, loc, ans)  fixed bin(24);

        loc = 0;
        ans = 0;

        do i = 1 to times;
            loc = mod( (loc + step + 1), i );

            if loc = 0 then do;
                ans = i;
            end;
        end;

        put skip list ( 'Part two:' || ans );

    end parttwo;

end day17;
